H1 ANStoX

A set of Python scripts to convert annotated source to code, tests, and
documentation in Markdown, (La)TeX, and html flavors.

(I started out with AWK scripts, but AWK inexplicably freezed while processing
this document, so I rewrote them.)

This method uses one or more K{.ans}F{ANnotated Source} files which are
filtered through one of the Python filters and mashed together to form a
document. The idea is that each K{.ans} file contains a number of code snippets,
each with a short bit of documentation, and a number of test cases for it.

Examples:

VB(
python3 anstocode.py alpha.ans beta.ans >thefile.c

python3 anstotest.py alpha.ans beta.ans >thefile.test

python3 anstomd.py alpha.ans beta.ans >README.md

python3 anstotex.py alpha.ans beta.ans >thedoc.tex

python3 anstohtml.py alpha.ans beta.ans >thepage.html
VB)

In these cases, K{alpha.ans} and K{beta.ans} are source files containing
documentation, test tags, and code tags.

The code tags are printed to the code file by K{anstocode.py} and the test
tags to the test file by K{anstotest.py}.

The documentation and content of the code tags are printed in different ways to
the README document by K{anstomd.py}, to the thedoc document by K{anstotex.py},
and to the thepage document by K{anstohtml.py}. These three scripts also use a
file called K{dict.txt} which is a special case which will be explained below.

PT(

Note that the .tex document is incomplete: it needs at least a preamble and a
begin and end for the document, which you will have to supply (I have no way of
knowing what you need regarding that).

PT)

The code in these scripts grew out of Graham Marlow's L{Markdown Rendering with
Awk}{https://www.mgmarlow.com/words/2024-03-23-markdown-awk/}.

H2 Tags

H3 Documentation text

The original conception had an K{MD} tag for documentation text. I was already
writing this document when I realized that it was better to have the
documentation text as free text, without any tags. I'm still getting used to
it, but it's definitely a change for the better.

VB(

This is a short docu text.

VB)

The documentation text is processed for styling and output by the
K{anstomd.py}, K{anstotex.py}, and K{anstohtml.py} scripts.

Remember to put empty lines before and after paragraphs, otherwise the
paragraphs will bleed into each other.

H3 Code

The K{CB} tag is for code, regardless of coding language.

VB(
CB(
#include <stdio.h>

int main (void) {
    printf("Hello, world");
    return 0;
}
CB)
VB)

CB(
#include <stdio.h>

int main (void) {
    printf("Hello, world");
    return 0;
}
CB)

The contents of the K{CB} tag are output without further processing by all the
scripts except K{anstotest.py}, which does not output it, and K{anstohtml.py},
which does basic htmlification of K{&}, K{<}, K{>}, K{"}, and K{'}.
K{anstomd.py}, K{anstotex.py}, and K{anstohtml.py} add elements around the tag's
output, suitable for presenting code (i.e. triple backticks for Markdown, the
K{lstlisting} environment for (La)TeX, <pre> and <code> for html).

H3 Verbatim

The K{VB} tag is for text that should be output with no extra processing
(except basic htmlification by K{anstohtml.py}) and presented with triple
backticks for Markdown, the K{verbatim} environment for (La)TeX, and <pre> for
html. The contents of the tag aren't output by K{anstocode.py} or
K{anstotest.py}.

H3 Test cases

The K{TT} tag is used for test case code which will be output by
K{anstotest.py} alone. The K{anstotest.py} script is geared towards the
K{tcltest} engine, but should be possible to convert to other test engines by
editing the initial and final output blocks in the script.

VB(
TT(
::tcltest::test foobar-1.0 {try the foobar} -body {
   ...
} -output "..."
TT)
VB)

TT(
::tcltest::test foobar-1.0 {try the foobar} -body {
   ...
} -output "..."
TT)

PT(

H3 Pulled text

The K{PT} tag is different. It isn't treated as a content tag. Instead, one
puts it around a short range of documentation text. The point of using it is
that it adds formatting around the text within it: for Markdown it is a
preceding and a succeeding horizontal rule; for (La)TeX it's the beginning and
end of the K{pulledtext} environment, for html it is the element <aside>. The end
result is a bit of text which is marked off, like an aside.

PT)

H3 Lists

The K{IT} and K{EN} tags E{at the beginning of the line} renders the line as a
bulleted or a numbered list item, respectively.

Example:

VB(
IT fee
IT fie
IT foe
VB)

IT fee
IT fie
IT foe

The K{DL} tag renders the line as a definition list item. The token LD separates
the term from the definition.

VB(
DL an item LD with a definition.
DL another item LD with mostly the same definition.
VB)

DL an item LD with a definition.
DL another item LD with mostly the same definition.

The definition list is faked in Markdown, and is not guaranteed to work everywhere.

H2 Headings

The headings tags are the same as in html, K{H1} to K{H6}, only you put them at
the start of the line, with the heading text following. They are translated to
hash groups for Markdown, to different heading elements for (La)TeX, and to the
obvious elements in html.

VB(
H4 A title
VB)

H4 A title

H3 IG, EM and KB

These three beginning of the line tags:

EN import a graphics element (an image)
EN wrap the entire line in italics elements
EN wrap the entire line in keyboard font elements

VB(
IG /images/myimage.png

EM This line will be in italics
VB)

EM This line will be in italics

H3 IF, IX, NI

These tags are mostly useful for translation to (La)TeX.

K{IF} imports an image, but puts it in a float and adds a caption.

VB(
IF /images/myimage.png Look how pretty
VB)

K{IX} makes an index entry from the text that follows it. K{NI} puts a
K{\noindent} in front of the line.

H2 Styling

H3 Appearance

K{B}\{ ... \} renders text bold. K{E}\{ ... \} renders text in italics. K{K}\{
... \} renders text in keyboard font.

VB(
first I B{was ...}, then I E{was ...}, but then I K{was ...}
VB)

first I B{was ...}, then I E{was ...}, but then I K{was ...}

H3 Links, footnotes, and references

K{F}\{ ... \} creates a (La)TeX footnote, or just a parenthesized bit of text
in Markdown or html. K{R}\{ ... \}\{ ... \} inserts a page reference text in
(La)TeX and a link in Markdown or html.

VB(
dolor R{sit amet}{toc-label}, consectetur
VB)

is rendered

VB(
dolor sit amet (see page \pageref{toc-label}), consectetur
VB)

in (La)TeX,

VB(
dolor [sit amet](https://github.com/hoodiecrow/ConsTcl#toc-label), consectetur
VB)

in Markdown (clearly some personalizing is necessary: edit the baseURL variable), and

VB(
dolor <a href="https://github.com/hoodiecrow/ConsTcl#toc-label">sit amet</a>, consectetur
VB)

in html (ditto).

K{S}\{ ... \}\{ ... \} is the same as K{R}, but adds elements for keyboard font around the anchor.

K{L}\{ ... \}\{ ... \} is like K{R}, but for an external link.

VB(
dolor L{sit amet}{http://site/dir/index.html}, consectetur
VB)

is rendered

VB(
dolor sit amet\footnote{See \texttt{http://site/dir/index.html}}, consectetur
VB)

in (La)TeX,

VB(
dolor [sit amet](http://site/dir/index.html), consectetur
VB)

in Markdown, and 

VB(
dolor <a href="http://site/dir/index.html">sit amet</a>, consectetur
VB)

in html.

K{W}\{ ... \}\{ ... \} is like K{L}, but for a link to Wikipedia. The contents
of the second capture field is supposed to be the part of the URL after
K{https://en.wikipedia.org/wiki/}. Example:

VB(
W{Ann Arbor, Michigan}{Ann_Arbor,_Michigan}
VB)

W{Ann Arbor, Michigan}{Ann_Arbor,_Michigan}

H2 dict.txt

Is a file containing a dictionary that I use to construct prototype tables for
procedures in my code. You will probably not need or want it, so just add a
K{dict.txt} containing the text "K{foo  ->  bar}" or something like that without
any empty lines (or just take the K{dict.txt} from the repository). With some
editing of the scripts, the use for it can be removed. I still need it, so
I'm not going to remove it myself.

